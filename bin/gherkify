#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

# begin
require 'gherkify'
# rescue LoadError
#   lib = File.expand_path('../../lib', __FILE__)
#   $LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
#   require 'gherkify'
# end

require 'slop'

def main
  opts = Slop.parse(help: true) do
    banner 'Usage: gherkify path [options]'
    on 'o', 'dir', 'Output directory', argument: :optional
    on 'dry', 'Dry run. Do nothing', argument: :optional
    on 'md', 'Generate Markdown document', argument: :optional
    on 'p', 'project', 'Generate project', argument: :optional
    on 'add-features', 'Add features as Use cases to generated document', argument: :optional
    on 'octopress', 'Generate Markdown for Octopress', argument: :optional
  end

  path = ARGV[0]
  puts opts.help if path.nil?
  return if path.nil?

  features_path = path
  output_dir = (opts.dir?) ? opts[:dir] : '.'
  image_path = output_dir

  if opts.project?
    output_dir = path
    features_path = (path != '.') ? File.join(path, 'features') : 'features'
    image_path = (path != '.') ? File.join(path, 'images') : 'images'
  end
  

  if File.directory? features_path
    files = Dir.glob(File.join(features_path, "*.feature"))
  else
    files = [features_path]
  end

  debug = opts.dry?

  options = {
    output_dir: output_dir, 
    debug: debug,
    image_path: image_path,
    add_features: opts.add_features?,
    format_octopress: opts.octopress?
  }

  gherkify = Gherkify.parse_files(files, options)

  if opts.dry? && opts.md?
    puts "Generated Markdown:"
    puts gherkify.to_md()
  elsif opts.dry? && !opts.md?
    puts gherkify.to_s
  else
    gherkify.fetch_diagram_images
    gherkify.to_md('index.md')
  end
end


# url: http://yuml.me/diagram/scruffy;scale:80;/class/
# params: dsl_text = [Customer]->[Billing Address]

main